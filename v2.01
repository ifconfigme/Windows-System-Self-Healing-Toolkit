<#
.SYNOPSIS
    Windows System First Aid Toolkit (Robust & Modular)
.DESCRIPTION
    Diagnostic and repair script for Windows 10/11—featuring admin rights check, logging with levels, confirmation prompts,
    modular design, robust error handling, a Help menu, and a clear version identifier.
    Ready for collaborative extension and future localization.
.NOTES
    Version: 2.0.1
    Author: Daniel Monbrod & ChatGPT
    Date: 2025-07-24
#>

# ----- SETTINGS -----
$SessionActions = @()
$ScriptVersion = "2.0.1"
$ScriptName    = "Windows System First Aid Toolkit"
$defaultLogFile = Join-Path -Path $env:TEMP -ChildPath ("WinSystemFirstAid-{0}.log" -f (Get-Date -Format 'yyyyMMdd-HHmmss'))
$logPathInput = Read-Host "Enter a custom log file path (e.g., C:\Logs\MyToolkit.log), or press Enter to use the default in $env:TEMP:"
if ([string]::IsNullOrWhiteSpace($logPathInput)) {
    $LogFile = $defaultLogFile
} else {
    $resolvedPath = Resolve-Path -Path $logPathInput -ErrorAction SilentlyContinue
    if ($resolvedPath) {
        $LogFile = $resolvedPath.Path
    } else {
        $LogFile = $logPathInput
    }
}

# ----- STRINGS FOR LOCALIZATION -----
$Strings = @{
    ScriptName           = $ScriptName
    Version              = $ScriptVersion
    NeedAdmin            = "This script must be run as Administrator. Please restart PowerShell as Administrator and try again."
    PressEnter           = "Press Enter to continue..."
    MainMenu             = "Choose an option (enter number, H for help, Q to quit):"
    InvalidSelection     = "Invalid selection."
    ExitMessage          = "Exiting... Thank you for using the Toolkit."
    LoggingOn            = "Logging enabled. All actions will be recorded to:"
    LogFileSaved         = "Log file saved as:"
    ConfirmAction        = "Are you sure you want to proceed? (y/n): "
    ActionCancelled      = "Action cancelled."
    SummaryTitle         = "=== Action Summary ==="
    Success              = "SUCCESS"
    Failure              = "FAILURE"
    HelpTitle            = "Help & About"
    HelpBody             = @"
This toolkit offers interactive repair and diagnostics for Windows 10/11.
Menu options include: system info, restore point creation, file & image repair, update/network resets, app fixes, and more.

- Select an item to see its action, then follow the prompts.
- Logs all actions to a file for review.
- Modular for easy extension.

Most tasks require admin rights. Use at your own discretion—no changes are made without your consent.

For documentation, contributions, or updates, visit the project repository.
"@
}

# ----- LOGGING FUNCTIONS -----
Function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )
    $time = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    $entry = "$time [$Level] $Message"
    Add-Content -Path $LogFile -Value $entry
    $color = Switch ($Level) {
        "INFO"  { "Gray" }
        "WARN"  { "Yellow" }
        "ERROR" { "Red" }
        Default { "White" }
    }
    Write-Host $entry -ForegroundColor $color
}

# ----- ADMIN CHECK -----
If (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Log $Strings.NeedAdmin "ERROR"
    Read-Host $Strings.PressEnter | Out-Null
    Exit
}
Write-Log "$($Strings.LoggingOn) $LogFile" "INFO"

# ----- UTILITY FUNCTIONS -----
Function Confirm-Action ($Prompt) {
    $confirm = Read-Host $Prompt
    if ($confirm -ne "y") {
        Write-Log $Strings.ActionCancelled "WARN"
        return $false
    }
    return $true
}
Function Pause-Continue { Read-Host $Strings.PressEnter | Out-Null }

Function Show-Section ($msg) { Write-Host "`n==== $msg ==== `n" -ForegroundColor Cyan }

# ----- REPAIR/DIAGNOSTIC FUNCTIONS -----
Function Show-SystemInfo {
    Show-Section "Basic System Info"
    Try {
        systeminfo | Select-String "OS Name|OS Version|System Type|Total Physical Memory|Available Physical Memory"
        Write-Log "Displayed basic system info." "INFO"
        Write-Host "$($Strings.Success): System info shown."
    } Catch {
        Write-Log "Unable to retrieve system info. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Could not retrieve system info." -ForegroundColor Red
    }
    Pause-Continue
}

Function Create-RestorePoint {
    Show-Section "System Restore Point"
    If (-not (Confirm-Action $Strings.ConfirmAction)) { return }
    Try {
        Enable-ComputerRestore -Drive "C:\"
        Checkpoint-Computer -Description "WinSystemFirstAid" -RestorePointType "MODIFY_SETTINGS"
        Write-Log "Restore point created." "INFO"
        Write-Host "$($Strings.Success): Restore point created." -ForegroundColor Green
    } Catch {
        Write-Log "Failed to create restore point. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Could not create restore point." -ForegroundColor Red
    }
    Pause-Continue
}

Function Run-Command {
    param(
        [string]$cmd,
        [string]$desc
    )
    Show-Section $desc
    Try {
        Invoke-Expression $cmd
        Write-Log "Ran command: $cmd" "INFO"
        Write-Host "$($Strings.Success): $desc" -ForegroundColor Green
    } Catch {
        Write-Log "Command failed: $cmd. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): $desc" -ForegroundColor Red
    }
    Pause-Continue
}

Function Run-SFC { Run-Command "sfc /scannow" "System File Checker" }
Function Run-DISM { Run-Command "DISM /Online /Cleanup-Image /RestoreHealth" "DISM Health Restore" }

Function Run-CHKDSK {
    Show-Section "Check Disk"
    $drive = Read-Host "Enter the drive letter to check (e.g., C), or press Enter for default (C):"
    if (-not $drive) { $drive = "C" }
    $result = Confirm-Action "Run CHKDSK on drive $drive:? (y = yes, m = menu, q = quit): "
    if ($result -eq "Menu") { return }
    if ($result -eq "Quit") { Exit }
    Try {
        Invoke-Expression "chkdsk $drive`: /f"
        Write-Log "Ran Check Disk on $drive:" "INFO"
        Write-Host "$($Strings.Success): Check Disk run on $drive: (may need reboot)." -ForegroundColor Green
    } Catch {
        Write-Log "Check Disk failed on $drive:. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Check Disk on $drive:." -ForegroundColor Red
    }
    Pause-Continue
}

Function Reset-WindowsUpdate {
    Show-Section "Reset Windows Update Components"
    If (-not (Confirm-Action $Strings.ConfirmAction)) { return }
    Try {
        net stop wuauserv
        net stop bits
        Rename-Item -Path "C:\Windows\SoftwareDistribution" -NewName "SoftwareDistribution.old" -ErrorAction SilentlyContinue
        net start wuauserv
        net start bits
        Write-Log "Windows Update components reset." "INFO"
        Write-Host "$($Strings.Success): Windows Update reset." -ForegroundColor Green
    } Catch {
        Write-Log "Windows Update reset failed. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Windows Update reset." -ForegroundColor Red
    }
    Pause-Continue
}

Function Reset-MicrosoftStore { Run-Command "wsreset.exe" "Clear Microsoft Store Cache" }

Function Reset-Network {
    Show-Section "Reset Network Stack"
    # First confirmation prompt
    If (-not (Confirm-Action "Are you sure you want to reset the entire network stack?")) { return }
    # Second confirmation prompt
    If (-not (Confirm-Action "This will reset network components and may disrupt connections. Continue?")) { return }
    Run-Command "netsh int ip reset" "Network IP Stack Reset"
    Run-Command "netsh winsock reset" "Winsock Reset"
    Run-Command "ipconfig /flushdns" "Flush DNS Cache"
}

Function Rebuild-IconCache {
    Show-Section "Rebuild Icon Cache"
    If (-not (Confirm-Action $Strings.ConfirmAction)) { return }
    Try {
        if (Test-Path "$env:LOCALAPPDATA\IconCache.db") {
            Remove-Item "$env:LOCALAPPDATA\IconCache.db" -Force
            Write-Log "Icon cache deleted." "INFO"
            Write-Host "$($Strings.Success): Icon cache deleted (reboot to rebuild)." -ForegroundColor Green
        } else {
            Write-Log "Icon cache not found." "WARN"
            Write-Host "Icon cache not found. Skipped." -ForegroundColor Yellow
        }
    } Catch {
        Write-Log "Icon cache removal failed. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Icon cache removal." -ForegroundColor Red
    }
    Pause-Continue
}

Function Reregister-WindowsApps {
    Run-Command "Get-AppXPackage -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register `"$($_.InstallLocation)\AppXManifest.xml`"}" "Re-register All Windows Apps"
}

Function Reset-WindowsStoreApp {
    Show-Section "Repair Windows Store App"
    If (-not (Confirm-Action $Strings.ConfirmAction)) { return }
    Try {
        Get-AppxPackage *windowsstore* | Reset-AppxPackage
        Write-Log "Windows Store app reset." "INFO"
        Write-Host "$($Strings.Success): Windows Store app reset." -ForegroundColor Green
    } Catch {
        Write-Log "Windows Store reset failed. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Windows Store app reset." -ForegroundColor Red
    }
    Pause-Continue
}

Function Show-Help {
    Show-Section $Strings.HelpTitle
    Write-Host $Strings.HelpBody -ForegroundColor White
    Pause-Continue
}

# --- Network Diagnostics ---
Function Test-NetworkDiagnostics {
    Show-Section "Network Diagnostics"
    Try {
        Write-Host "Testing connectivity to 8.8.8.8..."
        $ping = Test-Connection -ComputerName 8.8.8.8 -Count 2 -ErrorAction Stop
        $ping | Out-Host
        Write-Log "Pinged 8.8.8.8 successfully." "INFO"
    } Catch {
        Write-Log "Failed to ping 8.8.8.8. Error: $_" "ERROR"
        Write-Host "Failed to ping 8.8.8.8." -ForegroundColor Red
    }
    Try {
        Write-Host "Testing DNS resolution for www.microsoft.com..."
        Resolve-DnsName www.microsoft.com | Out-Host
        Write-Log "DNS resolution for www.microsoft.com completed." "INFO"
    } Catch {
        Write-Log "DNS resolution failed. Error: $_" "ERROR"
        Write-Host "DNS resolution failed." -ForegroundColor Red
    }
    Try {
        $gateway = Get-NetRoute | Where-Object { $_.DestinationPrefix -eq '0.0.0.0/0' } | Select-Object -First 1
        if ($gateway) {
            Write-Host "Default Gateway: $($gateway.NextHop)"
            Try {
                Test-Connection -ComputerName $gateway.NextHop -Count 2 | Out-Host
                Write-Log "Pinged default gateway $($gateway.NextHop) successfully." "INFO"
            } Catch {
                Write-Log "Failed to ping default gateway $($gateway.NextHop). Error: $_" "WARN"
            }
        } else {
            Write-Log "No default gateway found." "WARN"
            Write-Host "No default gateway found." -ForegroundColor Yellow
        }
    } Catch {
        Write-Log "Error retrieving default gateway: $_" "ERROR"
    }
    Pause-Continue
}

# --- Disk Usage & Cleanup ---
Function Show-DiskUsage {
    Show-Section "Disk Usage"
    Try {
        Get-PSDrive -PSProvider FileSystem | Select-Object Name, Free, Used, @{Name="FreeGB";Expression={"{0:N2}" -f ($_.Free/1GB)}} | Format-Table | Out-Host
        Write-Log "Displayed disk usage." "INFO"
    } Catch {
        Write-Log "Failed to display disk usage. Error: $_" "ERROR"
        Write-Host "Failed to display disk usage." -ForegroundColor Red
    }
    Pause-Continue
}

Function Clean-TempFiles {
    Show-Section "Clean Temp Files"
    If (-not (Confirm-Action $Strings.ConfirmAction)) { return }
    Try {
        $temp = $env:TEMP
        Remove-Item "$temp\*" -Force -Recurse -ErrorAction SilentlyContinue
        Write-Log "Temp files cleaned from $temp." "INFO"
        Write-Host "$($Strings.Success): Temp files cleaned." -ForegroundColor Green
    } Catch {
        Write-Log "Failed to clean temp files. Error: $_" "ERROR"
        Write-Host "$($Strings.Failure): Temp files not cleaned." -ForegroundColor Red
    }
    Pause-Continue
}

# --- Windows Update Status ---
Function Check-WindowsUpdates {
    Show-Section "Check for Windows Updates"
    Try {
        $updateLogPath = "$env:USERPROFILE\Desktop\WindowsUpdate.log"
        Write-Host "Windows now stores Windows Update logs in ETW trace format." -ForegroundColor Yellow
        Write-Host "To view update logs, a readable log will be generated on your Desktop using Get-WindowsUpdateLog."
        if (Confirm-Action "Do you want to generate WindowsUpdate.log on your Desktop now? (y/n): ") {
            Try {
                Get-WindowsUpdateLog -LogPath $updateLogPath | Out-Null
                Write-Host "Log generated at $updateLogPath" -ForegroundColor Green
                Write-Log "Generated WindowsUpdate.log at $updateLogPath" "INFO"
            } Catch {
                Write-Host "Failed to generate WindowsUpdate.log. See Microsoft documentation for troubleshooting." -ForegroundColor Red
                Write-Log "Failed to generate WindowsUpdate.log. Error: $_" "ERROR"
            }
        } else {
            Write-Host "Skipped generating WindowsUpdate.log." -ForegroundColor Yellow
            Write-Log "Skipped generating WindowsUpdate.log." "INFO"
        }
    } Catch {
        Write-Host "Unexpected error checking for Windows Update log." -ForegroundColor Red
        Write-Log "Unexpected error in Check-WindowsUpdates: $_" "ERROR"
    }
    Pause-Continue
}

# --- Check/Restart Critical Services ---
Function Check-RestartCriticalServices {
    Show-Section "Check & Restart Critical Windows Services"
    $criticalServices = @("wuauserv", "bits", "lanmanworkstation", "lanmanserver", "eventlog")
    foreach ($svc in $criticalServices) {
        Try {
            $service = Get-Service -Name $svc -ErrorAction Stop
            if ($service.Status -ne 'Running') {
                Write-Host "$svc is not running. Attempting to restart..."
                Try {
                    Start-Service -Name $svc -ErrorAction Stop
                    Write-Log "$svc restarted." "INFO"
                    Write-Host "$svc restarted." -ForegroundColor Green
                } Catch {
                    Write-Log "Failed to restart $svc. Error: $_" "ERROR"
                    Write-Host "Failed to restart $svc." -ForegroundColor Red
                }
            } else {
                Write-Host "$svc is running." -ForegroundColor Green
                Write-Log "$svc is running." "INFO"
            }
        } Catch {
            Write-Log "Service $svc not found. Error: $_" "WARN"
            Write-Host "Service $svc not found." -ForegroundColor Yellow
        }
    }
    Pause-Continue
}

# ----- MENU -----
$menu = @{
    "1"  = @{Label="Show Basic System Info";         Action={Show-SystemInfo}}
    "2"  = @{Label="Create System Restore Point";    Action={Create-RestorePoint}}
    "3"  = @{Label="Run System File Checker (SFC)";  Action={Run-SFC}}
    "4"  = @{Label="Run DISM Health Restore";        Action={Run-DISM}}
    "5"  = @{Label="Check Disk (chkdsk)";            Action={Run-CHKDSK}}
    "6"  = @{Label="Reset Windows Update";           Action={Reset-WindowsUpdate}}
    "7"  = @{Label="Clear Microsoft Store Cache";    Action={Reset-MicrosoftStore}}
    "8"  = @{Label="Reset Network Stack";            Action={Reset-Network}}
    "9"  = @{Label="Rebuild Icon Cache";             Action={Rebuild-IconCache}}
    "10" = @{Label="Re-register All Windows Apps";   Action={Reregister-WindowsApps}}
    "11" = @{Label="Repair Windows Store App";       Action={Reset-WindowsStoreApp}}
    "12" = @{Label="Run Network Diagnostics";        Action={Test-NetworkDiagnostics}}
    "13" = @{Label="Show Disk Usage";                Action={Show-DiskUsage}}
    "14" = @{Label="Clean Temp Files";               Action={Clean-TempFiles}}
    "15" = @{Label="Check for Windows Updates";      Action={Check-WindowsUpdates}}
    "16" = @{Label="Check & Restart Critical Services"; Action={Check-RestartCriticalServices}}
    "H"  = @{Label="Help/About";                     Action={Show-Help}}
    "Q" = @{ 
    Label="Quit";
    Action={
        Write-Host "`n==== Session Summary ====" -ForegroundColor Cyan
        if ($SessionActions.Count -eq 0) {
            Write-Host "No actions performed this session." -ForegroundColor Yellow
        } else {
            $SessionActions | ForEach-Object { Write-Host "• $_" -ForegroundColor White }
        }
        # Log summary to file as well
        Add-Content -Path $LogFile -Value "`n==== Session Summary ===="
        if ($SessionActions.Count -eq 0) {
            Add-Content -Path $LogFile -Value "No actions performed this session."
        } else {
            $SessionActions | ForEach-Object { Add-Content -Path $LogFile -Value "• $_" }
        }
        Write-Log $Strings.ExitMessage "INFO"
        Write-Host "`n$($Strings.LogFileSaved) $LogFile" -ForegroundColor Cyan
        Write-Host "`nThank you for using Windows System First Aid Toolkit!" -ForegroundColor Green
        Write-Host ""  # Final blank line
        Exit
    }
}

# ----- MAIN MENU LOOP -----
do {
    Show-Section "$($Strings.ScriptName) — v$($Strings.Version)"
    Write-Host $Strings.MainMenu
    foreach ($key in ($menu.Keys | Sort-Object { if ($_ -match '^\d+$') { [int]$_ } else { [int]::MaxValue } }, {$_.ToString()})) {
        Write-Host "  $key`t$($menu[$key].Label)"
    }
    $choice = Read-Host "Your choice"
    if ($menu.ContainsKey($choice)) {
        & $menu[$choice].Action
    } else {
        Write-Host $Strings.InvalidSelection -ForegroundColor Yellow
        Pause-Continue
    }
} while ($true)
